#include<bits/stdc++.h>
#include<iostream>
using namespace std;


//0-1 knapsack

int N;//no of items given
int C;//maximum capacity in the knapsack
int dp[50][50];
int solve(vector<int> v,vector<int> w,int i,int j)
{
    //i is the current item index and j is the current weight in the knapsack
    if(i==N)
    return 0;
    
    if(dp[i][j]!=-1)
    return dp[i][j];
    else
    {
        if(j+w[i]<=C)
        {
  /*we can take this element into account.So we have to return the maximum of take and dont
  take scenario.*/
            return dp[i][j]=max(v[i]+solve(v,w,i+1,j+w[i]),solve(v,w,i+1,j));
        }
        else
        return dp[i][j]=solve(v,w,i+1,j);
    }
}

int main()
{
    cin>>N>>C;
    vector<int> w(N);
    vector<int> v(N);
    for(int i=0;i<N;i++)
    cin>>w[i];
    for(int i=0;i<N;i++)
    cin>>v[i];
    
    memset(dp,-1,sizeof(dp));
    int ans = solve(v,w,0,0);
    cout<<ans<<endl;
}
