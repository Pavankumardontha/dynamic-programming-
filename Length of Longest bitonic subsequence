#include <iostream>
using namespace std;
#include<bits/stdc++.h>

int main()
{
    int n;
    cin>>n;
    vector<int> a(n);
    for(int i=0;i<n;i++)
    cin>>a[i];

/* we will compute lis[] and lds[]. From these we will find the length of the longest bitonic
subsequence.

lis[i]=length of longest increasing subsequence ending at index i.
lds[i]=length of longest decreasing subsequence starting at index i.
*/
vector<int> lis(n,1);
vector<int> lds(n,1);

for(int i=1;i<n;i++)
{
    for(int j=0;j<i;j++)
    {
        if(a[j]<a[i] && lis[j]+1>lis[i])
        lis[i]=lis[j]+1;
    }
}

for(int i=n-2;i>=0;i--)
{
    for(int j=n-1;j>i;j--)
    {
        if(a[i]>a[j] && lds[j]+1>lds[i])
        lds[i]=lds[j]+1;
    }
}


int ans = lis[0]+lds[0]-1;
for(int i=1;i<n;i++)
ans = max(ans,lis[i]+lds[i]-1);

cout<<ans<<endl;
}
